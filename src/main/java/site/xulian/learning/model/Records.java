package site.xulian.learning.model;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import com.jfinal.plugin.activerecord.Record;
import site.xulian.learning.model.base.BaseRecords;
import site.xulian.learning.utils.DataObj;

import java.sql.SQLException;
import java.util.Date;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Records extends BaseRecords<Records> {
	public static final Records dao = new Records().dao();

	public List<Record> getData(Integer id){
		return Db.find("select * from records where topic_id = ?",id);
	}

	public DataObj<Records> saveRecords(final Records records){
	    final Record record = new Record();
	    boolean isSuccess= Db.tx(new IAtom() {
                    @Override
                    public boolean run() throws SQLException {
                        Record record = Db.findFirst("SELECT * FROM student where student_id = ?",records.getStudentId());
                        if(null != record) {
                            records.setStudentName(record.get("name").toString());
                        }
                        records.setUpdateTime(new Date());
                        records.setCreateTime(new Date());
                        boolean success = records.save();
                        try {
                            if(!success){
                                record.set("msg","保存数据失败，稍后请重试");
                                return false;
                            }
                            Db.update("update topic set number = number + 1 where id = ?",records.getTopicId());
                        }catch (Exception e){
                            record.set("msg","保存数据失败，稍后请重试");
                            System.out.println(e.getMessage());
                            return false;
                        }
                        return true;
                    }
                });
	    if(!isSuccess){
	        return new DataObj<>(record.get("msg").toString());
        }
		return DataObj.getSuccessData(records);
	}

	public List<Record> getRecords(){
	    return Db.find("SELECT COUNT(DISTINCT t.id) create_times, t.student_id, t.student_name ,COUNT(DISTINCT r.id) reply_times\n" +
                "FROM topic t LEFT JOIN records r ON(t.student_id = r.student_id)\n" +
                "GROUP BY t.student_id ");
    }
}
