package site.xulian.learning.model;

import com.jfinal.kit.JsonKit;
import com.jfinal.kit.StrKit;
import com.jfinal.log.Logger;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import org.apache.commons.lang3.StringUtils;
import site.xulian.learning.model.base.BaseTopic;
import site.xulian.learning.utils.Common;
import site.xulian.learning.utils.DataObj;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Topic extends BaseTopic<Topic> {
	public static final Topic dao = new Topic().dao();
	private Logger log = Logger.getLogger(getClass());

	/**
	 * 分页获取数据
	 * @param title
	 * @param pageSize
	 * @param orderBy
	 * @param isASC
	 * @return
	 */
	public Page<Topic> getData(String title,String name,int pageNum, int pageSize, String orderBy, boolean isASC){
		log.info("title:"+title+",name"+name);
		List<Object> params = new ArrayList<Object>();
		StringBuffer sql = new StringBuffer();
		sql.append("FROM topic WHERE 1=1 AND student_id = ?  AND status != -5 ");
		params.add(name);
		if(StringUtils.isNotBlank(Common.nullToBlank(title))){
			sql.append("AND title like ?");
			params.add(Common.queryLike(title));
		}
		orderBy = StrKit.isBlank(orderBy)?"create_time":orderBy;
		sql.append("ORDER BY "+orderBy+" "+(isASC?"":"DESC ") +", weight DESC , number DESC");
		log.info(sql.toString());
		return paginate(pageNum, pageSize, "SELECT * ", sql.toString(), params.toArray());
	}

	/**
	 * 删除数据
	 */
	public DataObj<String> delete(String[] ids){
		log.info("编号信息"+ids);
		StringBuffer sql =new StringBuffer();
		sql.append("UPDATE topic SET status = -5 , update_time = now()");
		sql.append("WHERE id in (");
		sql.append(Common.arrayToSqlIn(ids));
		sql.append(")");
		Integer num = Db.update(sql.toString());
		if(num > 0){
			return DataObj.getSuccessData("");
		}
		return new DataObj<>("删除话题信息失败！");
	}

	/**
	 * 添加话题
	 */
	public DataObj<Topic> saveTopic(Topic topic){
		Topic oldTopic = Topic.dao.findById(topic.getId());
		if(topic.getStudentId() == null || (oldTopic != null && oldTopic.getStudentId() != topic.getStudentId())) {
			return new DataObj<>("你没有权限修改内容！");
		}
		log.info("保存数据"+ JsonKit.toJson(topic));
		Record record = Db.findFirst("SELECT * FROM student where student_id = ?",topic.getStudentId());
		if(null != record) {
			topic.setStudentName(record.get("name").toString());
		}
		topic.setStatus(0);
		try{
			boolean success = false;
			if(null == topic.getId()){
				topic.setCreateTime(new Date());
				topic.setUpdateTime(new Date());
				topic.setNumber(0);
                success = topic.save();
			}else{
				topic.setUpdateTime(new Date());
                success = topic.update();
			}
			if(!success){
				return new DataObj<>("保存数据失败，稍后请重试");
			}
		}catch(Exception e){
			log.warn("保存话题类型异常", e);
			return new DataObj<>("添加数据失败，稍后请重试");
		}
		return DataObj.getSuccessData(topic);
	}
	public Page<Topic> getData(String title, int pageNum, int pageSize,String orderBy, boolean isASC){
		List<Object> params = new ArrayList<Object>();
		StringBuffer sql = new StringBuffer();
		sql.append("FROM topic WHERE 1=1 AND status != -5 ");
		if(StringUtils.isNotBlank(Common.nullToBlank(title))){
			sql.append("AND title like ?");
			params.add(Common.queryLike(title));
		}
		orderBy = StrKit.isBlank(orderBy)?"create_time":orderBy;
		sql.append("ORDER BY isStick DESC ,"+orderBy+" "+(isASC?"":"DESC "));
//		sql.append("ORDER BY weight DESC, update_time DESC");
		log.info(sql.toString());
		return paginate(pageNum, pageSize, "SELECT * ", sql.toString(),params.toArray());
	}

	public List<Record> getTopic(){
		return Db.find("SELECT COUNT(id) sum_times, COUNT(student_id ) ask_times, student_id, student_name FROM answer");
	}
}
